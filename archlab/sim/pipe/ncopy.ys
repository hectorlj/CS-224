#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Hector Lopez Trejo
# hlj239
#
# Describe how and why you modified the baseline code.
# I split the code into two parts, the loop and the extra items. In the book 
# it explains that through loop unrolling the effect of loop overhead can be reduced 
# so i decided to do a 4 X 1 loop unrolling. This helped in reducing the number of bubbles 
# by alternatively using the %r8 and %r9 registers. Also, instead of setting a second loop
# to step through the final few elements of the vector, I set the next functions to take
# care of the remaining elements.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:
    iaddq $-4, %rdx # len = len - 4
    jl Last        

Loop:
    mrmovq (%rdi), %r10 		# read val1 from src[0]...
	mrmovq 8(%rdi), %r9         # read val2 from src[1]
    rmmovq %r10, (%rsi)    # ...and store val1 in dst[0]
    andq %r10, %r10		# val1 <= 0?
	jle Pos1		# if so, goto pos1:
	iaddq $1, %rax		# count++

Pos1:
    rmmovq %r9, 8(%rsi) # store val2 in dst[1]
    andq %r9, %r9   # val 2 <=0?
    jle Pos2    # if so, goto pos2:
    iaddq $1, %rax  # count++

Pos2:
    mrmovq 16(%rdi), %r10 # read val1 from src[2]
    mrmovq 24(%rdi), %r9    # read val2 from src[3]
    rmmovq %r10, 16(%rsi)   # store val1 in dst[2]
    andq %r10, %r10 # val1 <= 0?
    jle Pos3    # if so, goto pos3
    iaddq $1, %rax  # count ++

Pos3:
    rmmovq %r9, 24(%rsi)    # store val2 in dst[3]
    andq %r9, %r9   # val2 <= 0?
    jle Next    # if so, goto next
    iaddq $1, %rax  # count ++

Next: # sets up the pointers for the next 4 elements to be copied and counted
    iaddq $32, %rdi # set pointer to src + 32 (src[4], src[9], etc)
    iaddq $32, %rsi # set pointer to dst + 32 (dst[4], dst[9], etc) 
    iaddq $-4, %rdx		# len = len - 4, len >= 0
	jge Loop    # if so, goto loop

Last:
    iaddq $4, %rdx   # set len back to normal, len = len + 4

Final:
    iaddq $-1, %rdx # len = len - 1
    jl Done # if < 0 go to done
    mrmovq (%rdi), %r10 # Extra nodes are read, copied and counted. if len < 0 then goto done, only 
    mrmovq 8(%rdi), %r9 # reachable when the first for loop has iterated through all its items
    rmmovq %r10, (%rsi)
    andq %r10, %r10
    jle Final2
    iaddq $1, %rax

Final2:
    iaddq $-1, %rdx
    jl Done
    rmmovq %r9, 8(%rsi)
    andq %r9, %r9
    jle Final3
    iaddq $1, %rax

Final3:
    iaddq $-1, %rdx
    jl Done
    mrmovq 16(%rdi), %r10
    rmmovq %r10, 16(%rsi)
    andq %r10, %r10
    jle Done
    iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
